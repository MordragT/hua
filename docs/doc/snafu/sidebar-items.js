window.SIDEBAR_ITEMS = {"derive":[["Snafu","The `Snafu` macro is the entrypoint to defining your own error types. It is designed to require little configuration for the recommended and typical usecases while still offering flexibility for unique situations."]],"macro":[["ensure","Ensure a condition is true. If it is not, return from the function with an error."],["location","Constructs a [`Location`] using the current file, line, and column."],["whatever","Instantiate and return a stringly-typed error message."]],"mod":[["guide","Not currently built; please add the `guide` feature flag."],["prelude","Traits and macros used by most projects. Add `use snafu::prelude::*` to your code to quickly get started with SNAFU."]],"struct":[["Backtrace","A backtrace starting from the beginning of the thread."],["ChainCompat","Backported version of the `Chain` struct, to versions of Rust lacking it."],["Location","The source code location where the error was reported."],["NoneError","A temporary error type used when converting an `Option` into a `Result`"],["Whatever","A basic error type that you can use as a first step to better error handling."]],"trait":[["AsBacktrace","View a backtrace-like value as an optional backtrace."],["AsErrorSource","Converts the receiver into an `Error` trait object, suitable for use in `Error::source`."],["ErrorCompat","Backports changes to the `Error` trait to versions of Rust lacking them."],["FromString","Takes a string message and builds the corresponding error."],["GenerateImplicitData","Construct data to be included as part of an error. The data must require no arguments to be created."],["IntoError","Combines an underlying error with additional information about the error."],["OptionExt","Additions to `Option`."],["ResultExt","Additions to `Result`."]]};